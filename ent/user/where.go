// Code generated by ent, DO NOT EDIT.

package user

import (
	"github-bot/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// GithubID applies equality check predicate on the "github_id" field. It's identical to GithubIDEQ.
func GithubID(v int64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldGithubID, v))
}

// BangumiID applies equality check predicate on the "bangumi_id" field. It's identical to BangumiIDEQ.
func BangumiID(v int64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBangumiID, v))
}

// GithubIDEQ applies the EQ predicate on the "github_id" field.
func GithubIDEQ(v int64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldGithubID, v))
}

// GithubIDNEQ applies the NEQ predicate on the "github_id" field.
func GithubIDNEQ(v int64) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldGithubID, v))
}

// GithubIDIn applies the In predicate on the "github_id" field.
func GithubIDIn(vs ...int64) predicate.User {
	return predicate.User(sql.FieldIn(FieldGithubID, vs...))
}

// GithubIDNotIn applies the NotIn predicate on the "github_id" field.
func GithubIDNotIn(vs ...int64) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldGithubID, vs...))
}

// GithubIDGT applies the GT predicate on the "github_id" field.
func GithubIDGT(v int64) predicate.User {
	return predicate.User(sql.FieldGT(FieldGithubID, v))
}

// GithubIDGTE applies the GTE predicate on the "github_id" field.
func GithubIDGTE(v int64) predicate.User {
	return predicate.User(sql.FieldGTE(FieldGithubID, v))
}

// GithubIDLT applies the LT predicate on the "github_id" field.
func GithubIDLT(v int64) predicate.User {
	return predicate.User(sql.FieldLT(FieldGithubID, v))
}

// GithubIDLTE applies the LTE predicate on the "github_id" field.
func GithubIDLTE(v int64) predicate.User {
	return predicate.User(sql.FieldLTE(FieldGithubID, v))
}

// BangumiIDEQ applies the EQ predicate on the "bangumi_id" field.
func BangumiIDEQ(v int64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBangumiID, v))
}

// BangumiIDNEQ applies the NEQ predicate on the "bangumi_id" field.
func BangumiIDNEQ(v int64) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldBangumiID, v))
}

// BangumiIDIn applies the In predicate on the "bangumi_id" field.
func BangumiIDIn(vs ...int64) predicate.User {
	return predicate.User(sql.FieldIn(FieldBangumiID, vs...))
}

// BangumiIDNotIn applies the NotIn predicate on the "bangumi_id" field.
func BangumiIDNotIn(vs ...int64) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldBangumiID, vs...))
}

// BangumiIDGT applies the GT predicate on the "bangumi_id" field.
func BangumiIDGT(v int64) predicate.User {
	return predicate.User(sql.FieldGT(FieldBangumiID, v))
}

// BangumiIDGTE applies the GTE predicate on the "bangumi_id" field.
func BangumiIDGTE(v int64) predicate.User {
	return predicate.User(sql.FieldGTE(FieldBangumiID, v))
}

// BangumiIDLT applies the LT predicate on the "bangumi_id" field.
func BangumiIDLT(v int64) predicate.User {
	return predicate.User(sql.FieldLT(FieldBangumiID, v))
}

// BangumiIDLTE applies the LTE predicate on the "bangumi_id" field.
func BangumiIDLTE(v int64) predicate.User {
	return predicate.User(sql.FieldLTE(FieldBangumiID, v))
}

// BangumiIDIsNil applies the IsNil predicate on the "bangumi_id" field.
func BangumiIDIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldBangumiID))
}

// BangumiIDNotNil applies the NotNil predicate on the "bangumi_id" field.
func BangumiIDNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldBangumiID))
}

// HasPullRequests applies the HasEdge predicate on the "pull_requests" edge.
func HasPullRequests() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PullRequestsTable, PullRequestsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPullRequestsWith applies the HasEdge predicate on the "pull_requests" edge with a given conditions (other predicates).
func HasPullRequestsWith(preds ...predicate.Pulls) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newPullRequestsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		p(s.Not())
	})
}
