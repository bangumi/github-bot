// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github-bot/ent/pulls"
	"github-bot/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PullsCreate is the builder for creating a Pulls entity.
type PullsCreate struct {
	config
	mutation *PullsMutation
	hooks    []Hook
}

// SetOwner sets the "owner" field.
func (_c *PullsCreate) SetOwner(v string) *PullsCreate {
	_c.mutation.SetOwner(v)
	return _c
}

// SetPrID sets the "prID" field.
func (_c *PullsCreate) SetPrID(v int64) *PullsCreate {
	_c.mutation.SetPrID(v)
	return _c
}

// SetNillablePrID sets the "prID" field if the given value is not nil.
func (_c *PullsCreate) SetNillablePrID(v *int64) *PullsCreate {
	if v != nil {
		_c.SetPrID(*v)
	}
	return _c
}

// SetRepo sets the "repo" field.
func (_c *PullsCreate) SetRepo(v string) *PullsCreate {
	_c.mutation.SetRepo(v)
	return _c
}

// SetRepoID sets the "repoID" field.
func (_c *PullsCreate) SetRepoID(v int64) *PullsCreate {
	_c.mutation.SetRepoID(v)
	return _c
}

// SetNillableRepoID sets the "repoID" field if the given value is not nil.
func (_c *PullsCreate) SetNillableRepoID(v *int64) *PullsCreate {
	if v != nil {
		_c.SetRepoID(*v)
	}
	return _c
}

// SetNumber sets the "number" field.
func (_c *PullsCreate) SetNumber(v int) *PullsCreate {
	_c.mutation.SetNumber(v)
	return _c
}

// SetComment sets the "comment" field.
func (_c *PullsCreate) SetComment(v int64) *PullsCreate {
	_c.mutation.SetComment(v)
	return _c
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (_c *PullsCreate) SetNillableComment(v *int64) *PullsCreate {
	if v != nil {
		_c.SetComment(*v)
	}
	return _c
}

// SetCreatedAt sets the "createdAt" field.
func (_c *PullsCreate) SetCreatedAt(v time.Time) *PullsCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetMergedAt sets the "mergedAt" field.
func (_c *PullsCreate) SetMergedAt(v time.Time) *PullsCreate {
	_c.mutation.SetMergedAt(v)
	return _c
}

// SetNillableMergedAt sets the "mergedAt" field if the given value is not nil.
func (_c *PullsCreate) SetNillableMergedAt(v *time.Time) *PullsCreate {
	if v != nil {
		_c.SetMergedAt(*v)
	}
	return _c
}

// SetCheckRunID sets the "checkRunID" field.
func (_c *PullsCreate) SetCheckRunID(v int64) *PullsCreate {
	_c.mutation.SetCheckRunID(v)
	return _c
}

// SetNillableCheckRunID sets the "checkRunID" field if the given value is not nil.
func (_c *PullsCreate) SetNillableCheckRunID(v *int64) *PullsCreate {
	if v != nil {
		_c.SetCheckRunID(*v)
	}
	return _c
}

// SetCheckRunResult sets the "checkRunResult" field.
func (_c *PullsCreate) SetCheckRunResult(v string) *PullsCreate {
	_c.mutation.SetCheckRunResult(v)
	return _c
}

// SetNillableCheckRunResult sets the "checkRunResult" field if the given value is not nil.
func (_c *PullsCreate) SetNillableCheckRunResult(v *string) *PullsCreate {
	if v != nil {
		_c.SetCheckRunResult(*v)
	}
	return _c
}

// SetHeadSha sets the "headSha" field.
func (_c *PullsCreate) SetHeadSha(v string) *PullsCreate {
	_c.mutation.SetHeadSha(v)
	return _c
}

// SetNillableHeadSha sets the "headSha" field if the given value is not nil.
func (_c *PullsCreate) SetNillableHeadSha(v *string) *PullsCreate {
	if v != nil {
		_c.SetHeadSha(*v)
	}
	return _c
}

// SetCreatorID sets the "Creator" edge to the User entity by ID.
func (_c *PullsCreate) SetCreatorID(id int) *PullsCreate {
	_c.mutation.SetCreatorID(id)
	return _c
}

// SetCreator sets the "Creator" edge to the User entity.
func (_c *PullsCreate) SetCreator(v *User) *PullsCreate {
	return _c.SetCreatorID(v.ID)
}

// Mutation returns the PullsMutation object of the builder.
func (_c *PullsCreate) Mutation() *PullsMutation {
	return _c.mutation
}

// Save creates the Pulls in the database.
func (_c *PullsCreate) Save(ctx context.Context) (*Pulls, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *PullsCreate) SaveX(ctx context.Context) *Pulls {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *PullsCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *PullsCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *PullsCreate) defaults() {
	if _, ok := _c.mutation.PrID(); !ok {
		v := pulls.DefaultPrID
		_c.mutation.SetPrID(v)
	}
	if _, ok := _c.mutation.RepoID(); !ok {
		v := pulls.DefaultRepoID
		_c.mutation.SetRepoID(v)
	}
	if _, ok := _c.mutation.Comment(); !ok {
		v := pulls.DefaultComment
		_c.mutation.SetComment(v)
	}
	if _, ok := _c.mutation.CheckRunID(); !ok {
		v := pulls.DefaultCheckRunID
		_c.mutation.SetCheckRunID(v)
	}
	if _, ok := _c.mutation.CheckRunResult(); !ok {
		v := pulls.DefaultCheckRunResult
		_c.mutation.SetCheckRunResult(v)
	}
	if _, ok := _c.mutation.HeadSha(); !ok {
		v := pulls.DefaultHeadSha
		_c.mutation.SetHeadSha(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *PullsCreate) check() error {
	if _, ok := _c.mutation.Owner(); !ok {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required field "Pulls.owner"`)}
	}
	if _, ok := _c.mutation.PrID(); !ok {
		return &ValidationError{Name: "prID", err: errors.New(`ent: missing required field "Pulls.prID"`)}
	}
	if _, ok := _c.mutation.Repo(); !ok {
		return &ValidationError{Name: "repo", err: errors.New(`ent: missing required field "Pulls.repo"`)}
	}
	if _, ok := _c.mutation.RepoID(); !ok {
		return &ValidationError{Name: "repoID", err: errors.New(`ent: missing required field "Pulls.repoID"`)}
	}
	if _, ok := _c.mutation.Number(); !ok {
		return &ValidationError{Name: "number", err: errors.New(`ent: missing required field "Pulls.number"`)}
	}
	if _, ok := _c.mutation.Comment(); !ok {
		return &ValidationError{Name: "comment", err: errors.New(`ent: missing required field "Pulls.comment"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "Pulls.createdAt"`)}
	}
	if _, ok := _c.mutation.CheckRunID(); !ok {
		return &ValidationError{Name: "checkRunID", err: errors.New(`ent: missing required field "Pulls.checkRunID"`)}
	}
	if _, ok := _c.mutation.CheckRunResult(); !ok {
		return &ValidationError{Name: "checkRunResult", err: errors.New(`ent: missing required field "Pulls.checkRunResult"`)}
	}
	if _, ok := _c.mutation.HeadSha(); !ok {
		return &ValidationError{Name: "headSha", err: errors.New(`ent: missing required field "Pulls.headSha"`)}
	}
	if len(_c.mutation.CreatorIDs()) == 0 {
		return &ValidationError{Name: "Creator", err: errors.New(`ent: missing required edge "Pulls.Creator"`)}
	}
	return nil
}

func (_c *PullsCreate) sqlSave(ctx context.Context) (*Pulls, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *PullsCreate) createSpec() (*Pulls, *sqlgraph.CreateSpec) {
	var (
		_node = &Pulls{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(pulls.Table, sqlgraph.NewFieldSpec(pulls.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.Owner(); ok {
		_spec.SetField(pulls.FieldOwner, field.TypeString, value)
		_node.Owner = value
	}
	if value, ok := _c.mutation.PrID(); ok {
		_spec.SetField(pulls.FieldPrID, field.TypeInt64, value)
		_node.PrID = value
	}
	if value, ok := _c.mutation.Repo(); ok {
		_spec.SetField(pulls.FieldRepo, field.TypeString, value)
		_node.Repo = value
	}
	if value, ok := _c.mutation.RepoID(); ok {
		_spec.SetField(pulls.FieldRepoID, field.TypeInt64, value)
		_node.RepoID = value
	}
	if value, ok := _c.mutation.Number(); ok {
		_spec.SetField(pulls.FieldNumber, field.TypeInt, value)
		_node.Number = value
	}
	if value, ok := _c.mutation.Comment(); ok {
		_spec.SetField(pulls.FieldComment, field.TypeInt64, value)
		_node.Comment = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(pulls.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.MergedAt(); ok {
		_spec.SetField(pulls.FieldMergedAt, field.TypeTime, value)
		_node.MergedAt = value
	}
	if value, ok := _c.mutation.CheckRunID(); ok {
		_spec.SetField(pulls.FieldCheckRunID, field.TypeInt64, value)
		_node.CheckRunID = value
	}
	if value, ok := _c.mutation.CheckRunResult(); ok {
		_spec.SetField(pulls.FieldCheckRunResult, field.TypeString, value)
		_node.CheckRunResult = value
	}
	if value, ok := _c.mutation.HeadSha(); ok {
		_spec.SetField(pulls.FieldHeadSha, field.TypeString, value)
		_node.HeadSha = value
	}
	if nodes := _c.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pulls.CreatorTable,
			Columns: []string{pulls.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_pull_requests = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PullsCreateBulk is the builder for creating many Pulls entities in bulk.
type PullsCreateBulk struct {
	config
	err      error
	builders []*PullsCreate
}

// Save creates the Pulls entities in the database.
func (_c *PullsCreateBulk) Save(ctx context.Context) ([]*Pulls, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Pulls, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PullsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *PullsCreateBulk) SaveX(ctx context.Context) []*Pulls {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *PullsCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *PullsCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
