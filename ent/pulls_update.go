// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github-bot/ent/predicate"
	"github-bot/ent/pulls"
	"github-bot/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PullsUpdate is the builder for updating Pulls entities.
type PullsUpdate struct {
	config
	hooks    []Hook
	mutation *PullsMutation
}

// Where appends a list predicates to the PullsUpdate builder.
func (_u *PullsUpdate) Where(ps ...predicate.Pulls) *PullsUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetOwner sets the "owner" field.
func (_u *PullsUpdate) SetOwner(v string) *PullsUpdate {
	_u.mutation.SetOwner(v)
	return _u
}

// SetNillableOwner sets the "owner" field if the given value is not nil.
func (_u *PullsUpdate) SetNillableOwner(v *string) *PullsUpdate {
	if v != nil {
		_u.SetOwner(*v)
	}
	return _u
}

// SetPrID sets the "prID" field.
func (_u *PullsUpdate) SetPrID(v int64) *PullsUpdate {
	_u.mutation.ResetPrID()
	_u.mutation.SetPrID(v)
	return _u
}

// SetNillablePrID sets the "prID" field if the given value is not nil.
func (_u *PullsUpdate) SetNillablePrID(v *int64) *PullsUpdate {
	if v != nil {
		_u.SetPrID(*v)
	}
	return _u
}

// AddPrID adds value to the "prID" field.
func (_u *PullsUpdate) AddPrID(v int64) *PullsUpdate {
	_u.mutation.AddPrID(v)
	return _u
}

// SetRepo sets the "repo" field.
func (_u *PullsUpdate) SetRepo(v string) *PullsUpdate {
	_u.mutation.SetRepo(v)
	return _u
}

// SetNillableRepo sets the "repo" field if the given value is not nil.
func (_u *PullsUpdate) SetNillableRepo(v *string) *PullsUpdate {
	if v != nil {
		_u.SetRepo(*v)
	}
	return _u
}

// SetRepoID sets the "repoID" field.
func (_u *PullsUpdate) SetRepoID(v int64) *PullsUpdate {
	_u.mutation.ResetRepoID()
	_u.mutation.SetRepoID(v)
	return _u
}

// SetNillableRepoID sets the "repoID" field if the given value is not nil.
func (_u *PullsUpdate) SetNillableRepoID(v *int64) *PullsUpdate {
	if v != nil {
		_u.SetRepoID(*v)
	}
	return _u
}

// AddRepoID adds value to the "repoID" field.
func (_u *PullsUpdate) AddRepoID(v int64) *PullsUpdate {
	_u.mutation.AddRepoID(v)
	return _u
}

// SetNumber sets the "number" field.
func (_u *PullsUpdate) SetNumber(v int) *PullsUpdate {
	_u.mutation.ResetNumber()
	_u.mutation.SetNumber(v)
	return _u
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (_u *PullsUpdate) SetNillableNumber(v *int) *PullsUpdate {
	if v != nil {
		_u.SetNumber(*v)
	}
	return _u
}

// AddNumber adds value to the "number" field.
func (_u *PullsUpdate) AddNumber(v int) *PullsUpdate {
	_u.mutation.AddNumber(v)
	return _u
}

// SetComment sets the "comment" field.
func (_u *PullsUpdate) SetComment(v int64) *PullsUpdate {
	_u.mutation.ResetComment()
	_u.mutation.SetComment(v)
	return _u
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (_u *PullsUpdate) SetNillableComment(v *int64) *PullsUpdate {
	if v != nil {
		_u.SetComment(*v)
	}
	return _u
}

// AddComment adds value to the "comment" field.
func (_u *PullsUpdate) AddComment(v int64) *PullsUpdate {
	_u.mutation.AddComment(v)
	return _u
}

// SetCreatedAt sets the "createdAt" field.
func (_u *PullsUpdate) SetCreatedAt(v time.Time) *PullsUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (_u *PullsUpdate) SetNillableCreatedAt(v *time.Time) *PullsUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetMergedAt sets the "mergedAt" field.
func (_u *PullsUpdate) SetMergedAt(v time.Time) *PullsUpdate {
	_u.mutation.SetMergedAt(v)
	return _u
}

// SetNillableMergedAt sets the "mergedAt" field if the given value is not nil.
func (_u *PullsUpdate) SetNillableMergedAt(v *time.Time) *PullsUpdate {
	if v != nil {
		_u.SetMergedAt(*v)
	}
	return _u
}

// ClearMergedAt clears the value of the "mergedAt" field.
func (_u *PullsUpdate) ClearMergedAt() *PullsUpdate {
	_u.mutation.ClearMergedAt()
	return _u
}

// SetCheckRunID sets the "checkRunID" field.
func (_u *PullsUpdate) SetCheckRunID(v int64) *PullsUpdate {
	_u.mutation.ResetCheckRunID()
	_u.mutation.SetCheckRunID(v)
	return _u
}

// SetNillableCheckRunID sets the "checkRunID" field if the given value is not nil.
func (_u *PullsUpdate) SetNillableCheckRunID(v *int64) *PullsUpdate {
	if v != nil {
		_u.SetCheckRunID(*v)
	}
	return _u
}

// AddCheckRunID adds value to the "checkRunID" field.
func (_u *PullsUpdate) AddCheckRunID(v int64) *PullsUpdate {
	_u.mutation.AddCheckRunID(v)
	return _u
}

// SetCheckRunResult sets the "checkRunResult" field.
func (_u *PullsUpdate) SetCheckRunResult(v string) *PullsUpdate {
	_u.mutation.SetCheckRunResult(v)
	return _u
}

// SetNillableCheckRunResult sets the "checkRunResult" field if the given value is not nil.
func (_u *PullsUpdate) SetNillableCheckRunResult(v *string) *PullsUpdate {
	if v != nil {
		_u.SetCheckRunResult(*v)
	}
	return _u
}

// SetHeadSha sets the "headSha" field.
func (_u *PullsUpdate) SetHeadSha(v string) *PullsUpdate {
	_u.mutation.SetHeadSha(v)
	return _u
}

// SetNillableHeadSha sets the "headSha" field if the given value is not nil.
func (_u *PullsUpdate) SetNillableHeadSha(v *string) *PullsUpdate {
	if v != nil {
		_u.SetHeadSha(*v)
	}
	return _u
}

// SetCreatorID sets the "Creator" edge to the User entity by ID.
func (_u *PullsUpdate) SetCreatorID(id int) *PullsUpdate {
	_u.mutation.SetCreatorID(id)
	return _u
}

// SetCreator sets the "Creator" edge to the User entity.
func (_u *PullsUpdate) SetCreator(v *User) *PullsUpdate {
	return _u.SetCreatorID(v.ID)
}

// Mutation returns the PullsMutation object of the builder.
func (_u *PullsUpdate) Mutation() *PullsMutation {
	return _u.mutation
}

// ClearCreator clears the "Creator" edge to the User entity.
func (_u *PullsUpdate) ClearCreator() *PullsUpdate {
	_u.mutation.ClearCreator()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *PullsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PullsUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *PullsUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PullsUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *PullsUpdate) check() error {
	if _u.mutation.CreatorCleared() && len(_u.mutation.CreatorIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Pulls.Creator"`)
	}
	return nil
}

func (_u *PullsUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(pulls.Table, pulls.Columns, sqlgraph.NewFieldSpec(pulls.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Owner(); ok {
		_spec.SetField(pulls.FieldOwner, field.TypeString, value)
	}
	if value, ok := _u.mutation.PrID(); ok {
		_spec.SetField(pulls.FieldPrID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedPrID(); ok {
		_spec.AddField(pulls.FieldPrID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.Repo(); ok {
		_spec.SetField(pulls.FieldRepo, field.TypeString, value)
	}
	if value, ok := _u.mutation.RepoID(); ok {
		_spec.SetField(pulls.FieldRepoID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedRepoID(); ok {
		_spec.AddField(pulls.FieldRepoID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.Number(); ok {
		_spec.SetField(pulls.FieldNumber, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedNumber(); ok {
		_spec.AddField(pulls.FieldNumber, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Comment(); ok {
		_spec.SetField(pulls.FieldComment, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedComment(); ok {
		_spec.AddField(pulls.FieldComment, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(pulls.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.MergedAt(); ok {
		_spec.SetField(pulls.FieldMergedAt, field.TypeTime, value)
	}
	if _u.mutation.MergedAtCleared() {
		_spec.ClearField(pulls.FieldMergedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.CheckRunID(); ok {
		_spec.SetField(pulls.FieldCheckRunID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCheckRunID(); ok {
		_spec.AddField(pulls.FieldCheckRunID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.CheckRunResult(); ok {
		_spec.SetField(pulls.FieldCheckRunResult, field.TypeString, value)
	}
	if value, ok := _u.mutation.HeadSha(); ok {
		_spec.SetField(pulls.FieldHeadSha, field.TypeString, value)
	}
	if _u.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pulls.CreatorTable,
			Columns: []string{pulls.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pulls.CreatorTable,
			Columns: []string{pulls.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pulls.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// PullsUpdateOne is the builder for updating a single Pulls entity.
type PullsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PullsMutation
}

// SetOwner sets the "owner" field.
func (_u *PullsUpdateOne) SetOwner(v string) *PullsUpdateOne {
	_u.mutation.SetOwner(v)
	return _u
}

// SetNillableOwner sets the "owner" field if the given value is not nil.
func (_u *PullsUpdateOne) SetNillableOwner(v *string) *PullsUpdateOne {
	if v != nil {
		_u.SetOwner(*v)
	}
	return _u
}

// SetPrID sets the "prID" field.
func (_u *PullsUpdateOne) SetPrID(v int64) *PullsUpdateOne {
	_u.mutation.ResetPrID()
	_u.mutation.SetPrID(v)
	return _u
}

// SetNillablePrID sets the "prID" field if the given value is not nil.
func (_u *PullsUpdateOne) SetNillablePrID(v *int64) *PullsUpdateOne {
	if v != nil {
		_u.SetPrID(*v)
	}
	return _u
}

// AddPrID adds value to the "prID" field.
func (_u *PullsUpdateOne) AddPrID(v int64) *PullsUpdateOne {
	_u.mutation.AddPrID(v)
	return _u
}

// SetRepo sets the "repo" field.
func (_u *PullsUpdateOne) SetRepo(v string) *PullsUpdateOne {
	_u.mutation.SetRepo(v)
	return _u
}

// SetNillableRepo sets the "repo" field if the given value is not nil.
func (_u *PullsUpdateOne) SetNillableRepo(v *string) *PullsUpdateOne {
	if v != nil {
		_u.SetRepo(*v)
	}
	return _u
}

// SetRepoID sets the "repoID" field.
func (_u *PullsUpdateOne) SetRepoID(v int64) *PullsUpdateOne {
	_u.mutation.ResetRepoID()
	_u.mutation.SetRepoID(v)
	return _u
}

// SetNillableRepoID sets the "repoID" field if the given value is not nil.
func (_u *PullsUpdateOne) SetNillableRepoID(v *int64) *PullsUpdateOne {
	if v != nil {
		_u.SetRepoID(*v)
	}
	return _u
}

// AddRepoID adds value to the "repoID" field.
func (_u *PullsUpdateOne) AddRepoID(v int64) *PullsUpdateOne {
	_u.mutation.AddRepoID(v)
	return _u
}

// SetNumber sets the "number" field.
func (_u *PullsUpdateOne) SetNumber(v int) *PullsUpdateOne {
	_u.mutation.ResetNumber()
	_u.mutation.SetNumber(v)
	return _u
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (_u *PullsUpdateOne) SetNillableNumber(v *int) *PullsUpdateOne {
	if v != nil {
		_u.SetNumber(*v)
	}
	return _u
}

// AddNumber adds value to the "number" field.
func (_u *PullsUpdateOne) AddNumber(v int) *PullsUpdateOne {
	_u.mutation.AddNumber(v)
	return _u
}

// SetComment sets the "comment" field.
func (_u *PullsUpdateOne) SetComment(v int64) *PullsUpdateOne {
	_u.mutation.ResetComment()
	_u.mutation.SetComment(v)
	return _u
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (_u *PullsUpdateOne) SetNillableComment(v *int64) *PullsUpdateOne {
	if v != nil {
		_u.SetComment(*v)
	}
	return _u
}

// AddComment adds value to the "comment" field.
func (_u *PullsUpdateOne) AddComment(v int64) *PullsUpdateOne {
	_u.mutation.AddComment(v)
	return _u
}

// SetCreatedAt sets the "createdAt" field.
func (_u *PullsUpdateOne) SetCreatedAt(v time.Time) *PullsUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (_u *PullsUpdateOne) SetNillableCreatedAt(v *time.Time) *PullsUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetMergedAt sets the "mergedAt" field.
func (_u *PullsUpdateOne) SetMergedAt(v time.Time) *PullsUpdateOne {
	_u.mutation.SetMergedAt(v)
	return _u
}

// SetNillableMergedAt sets the "mergedAt" field if the given value is not nil.
func (_u *PullsUpdateOne) SetNillableMergedAt(v *time.Time) *PullsUpdateOne {
	if v != nil {
		_u.SetMergedAt(*v)
	}
	return _u
}

// ClearMergedAt clears the value of the "mergedAt" field.
func (_u *PullsUpdateOne) ClearMergedAt() *PullsUpdateOne {
	_u.mutation.ClearMergedAt()
	return _u
}

// SetCheckRunID sets the "checkRunID" field.
func (_u *PullsUpdateOne) SetCheckRunID(v int64) *PullsUpdateOne {
	_u.mutation.ResetCheckRunID()
	_u.mutation.SetCheckRunID(v)
	return _u
}

// SetNillableCheckRunID sets the "checkRunID" field if the given value is not nil.
func (_u *PullsUpdateOne) SetNillableCheckRunID(v *int64) *PullsUpdateOne {
	if v != nil {
		_u.SetCheckRunID(*v)
	}
	return _u
}

// AddCheckRunID adds value to the "checkRunID" field.
func (_u *PullsUpdateOne) AddCheckRunID(v int64) *PullsUpdateOne {
	_u.mutation.AddCheckRunID(v)
	return _u
}

// SetCheckRunResult sets the "checkRunResult" field.
func (_u *PullsUpdateOne) SetCheckRunResult(v string) *PullsUpdateOne {
	_u.mutation.SetCheckRunResult(v)
	return _u
}

// SetNillableCheckRunResult sets the "checkRunResult" field if the given value is not nil.
func (_u *PullsUpdateOne) SetNillableCheckRunResult(v *string) *PullsUpdateOne {
	if v != nil {
		_u.SetCheckRunResult(*v)
	}
	return _u
}

// SetHeadSha sets the "headSha" field.
func (_u *PullsUpdateOne) SetHeadSha(v string) *PullsUpdateOne {
	_u.mutation.SetHeadSha(v)
	return _u
}

// SetNillableHeadSha sets the "headSha" field if the given value is not nil.
func (_u *PullsUpdateOne) SetNillableHeadSha(v *string) *PullsUpdateOne {
	if v != nil {
		_u.SetHeadSha(*v)
	}
	return _u
}

// SetCreatorID sets the "Creator" edge to the User entity by ID.
func (_u *PullsUpdateOne) SetCreatorID(id int) *PullsUpdateOne {
	_u.mutation.SetCreatorID(id)
	return _u
}

// SetCreator sets the "Creator" edge to the User entity.
func (_u *PullsUpdateOne) SetCreator(v *User) *PullsUpdateOne {
	return _u.SetCreatorID(v.ID)
}

// Mutation returns the PullsMutation object of the builder.
func (_u *PullsUpdateOne) Mutation() *PullsMutation {
	return _u.mutation
}

// ClearCreator clears the "Creator" edge to the User entity.
func (_u *PullsUpdateOne) ClearCreator() *PullsUpdateOne {
	_u.mutation.ClearCreator()
	return _u
}

// Where appends a list predicates to the PullsUpdate builder.
func (_u *PullsUpdateOne) Where(ps ...predicate.Pulls) *PullsUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *PullsUpdateOne) Select(field string, fields ...string) *PullsUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Pulls entity.
func (_u *PullsUpdateOne) Save(ctx context.Context) (*Pulls, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PullsUpdateOne) SaveX(ctx context.Context) *Pulls {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *PullsUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PullsUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *PullsUpdateOne) check() error {
	if _u.mutation.CreatorCleared() && len(_u.mutation.CreatorIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Pulls.Creator"`)
	}
	return nil
}

func (_u *PullsUpdateOne) sqlSave(ctx context.Context) (_node *Pulls, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(pulls.Table, pulls.Columns, sqlgraph.NewFieldSpec(pulls.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Pulls.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pulls.FieldID)
		for _, f := range fields {
			if !pulls.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != pulls.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Owner(); ok {
		_spec.SetField(pulls.FieldOwner, field.TypeString, value)
	}
	if value, ok := _u.mutation.PrID(); ok {
		_spec.SetField(pulls.FieldPrID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedPrID(); ok {
		_spec.AddField(pulls.FieldPrID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.Repo(); ok {
		_spec.SetField(pulls.FieldRepo, field.TypeString, value)
	}
	if value, ok := _u.mutation.RepoID(); ok {
		_spec.SetField(pulls.FieldRepoID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedRepoID(); ok {
		_spec.AddField(pulls.FieldRepoID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.Number(); ok {
		_spec.SetField(pulls.FieldNumber, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedNumber(); ok {
		_spec.AddField(pulls.FieldNumber, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Comment(); ok {
		_spec.SetField(pulls.FieldComment, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedComment(); ok {
		_spec.AddField(pulls.FieldComment, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(pulls.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.MergedAt(); ok {
		_spec.SetField(pulls.FieldMergedAt, field.TypeTime, value)
	}
	if _u.mutation.MergedAtCleared() {
		_spec.ClearField(pulls.FieldMergedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.CheckRunID(); ok {
		_spec.SetField(pulls.FieldCheckRunID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCheckRunID(); ok {
		_spec.AddField(pulls.FieldCheckRunID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.CheckRunResult(); ok {
		_spec.SetField(pulls.FieldCheckRunResult, field.TypeString, value)
	}
	if value, ok := _u.mutation.HeadSha(); ok {
		_spec.SetField(pulls.FieldHeadSha, field.TypeString, value)
	}
	if _u.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pulls.CreatorTable,
			Columns: []string{pulls.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pulls.CreatorTable,
			Columns: []string{pulls.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Pulls{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pulls.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
