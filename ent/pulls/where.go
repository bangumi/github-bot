// Code generated by ent, DO NOT EDIT.

package pulls

import (
	"github-bot/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Pulls {
	return predicate.Pulls(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Pulls {
	return predicate.Pulls(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Pulls {
	return predicate.Pulls(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Pulls {
	return predicate.Pulls(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Pulls {
	return predicate.Pulls(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Pulls {
	return predicate.Pulls(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Pulls {
	return predicate.Pulls(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Pulls {
	return predicate.Pulls(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Pulls {
	return predicate.Pulls(sql.FieldLTE(FieldID, id))
}

// Owner applies equality check predicate on the "owner" field. It's identical to OwnerEQ.
func Owner(v string) predicate.Pulls {
	return predicate.Pulls(sql.FieldEQ(FieldOwner, v))
}

// PrID applies equality check predicate on the "prID" field. It's identical to PrIDEQ.
func PrID(v int64) predicate.Pulls {
	return predicate.Pulls(sql.FieldEQ(FieldPrID, v))
}

// Repo applies equality check predicate on the "repo" field. It's identical to RepoEQ.
func Repo(v string) predicate.Pulls {
	return predicate.Pulls(sql.FieldEQ(FieldRepo, v))
}

// RepoID applies equality check predicate on the "repoID" field. It's identical to RepoIDEQ.
func RepoID(v int64) predicate.Pulls {
	return predicate.Pulls(sql.FieldEQ(FieldRepoID, v))
}

// Number applies equality check predicate on the "number" field. It's identical to NumberEQ.
func Number(v int) predicate.Pulls {
	return predicate.Pulls(sql.FieldEQ(FieldNumber, v))
}

// Comment applies equality check predicate on the "comment" field. It's identical to CommentEQ.
func Comment(v int64) predicate.Pulls {
	return predicate.Pulls(sql.FieldEQ(FieldComment, v))
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Pulls {
	return predicate.Pulls(sql.FieldEQ(FieldCreatedAt, v))
}

// MergedAt applies equality check predicate on the "mergedAt" field. It's identical to MergedAtEQ.
func MergedAt(v time.Time) predicate.Pulls {
	return predicate.Pulls(sql.FieldEQ(FieldMergedAt, v))
}

// CheckRunID applies equality check predicate on the "checkRunID" field. It's identical to CheckRunIDEQ.
func CheckRunID(v int64) predicate.Pulls {
	return predicate.Pulls(sql.FieldEQ(FieldCheckRunID, v))
}

// CheckRunResult applies equality check predicate on the "checkRunResult" field. It's identical to CheckRunResultEQ.
func CheckRunResult(v string) predicate.Pulls {
	return predicate.Pulls(sql.FieldEQ(FieldCheckRunResult, v))
}

// HeadSha applies equality check predicate on the "headSha" field. It's identical to HeadShaEQ.
func HeadSha(v string) predicate.Pulls {
	return predicate.Pulls(sql.FieldEQ(FieldHeadSha, v))
}

// OwnerEQ applies the EQ predicate on the "owner" field.
func OwnerEQ(v string) predicate.Pulls {
	return predicate.Pulls(sql.FieldEQ(FieldOwner, v))
}

// OwnerNEQ applies the NEQ predicate on the "owner" field.
func OwnerNEQ(v string) predicate.Pulls {
	return predicate.Pulls(sql.FieldNEQ(FieldOwner, v))
}

// OwnerIn applies the In predicate on the "owner" field.
func OwnerIn(vs ...string) predicate.Pulls {
	return predicate.Pulls(sql.FieldIn(FieldOwner, vs...))
}

// OwnerNotIn applies the NotIn predicate on the "owner" field.
func OwnerNotIn(vs ...string) predicate.Pulls {
	return predicate.Pulls(sql.FieldNotIn(FieldOwner, vs...))
}

// OwnerGT applies the GT predicate on the "owner" field.
func OwnerGT(v string) predicate.Pulls {
	return predicate.Pulls(sql.FieldGT(FieldOwner, v))
}

// OwnerGTE applies the GTE predicate on the "owner" field.
func OwnerGTE(v string) predicate.Pulls {
	return predicate.Pulls(sql.FieldGTE(FieldOwner, v))
}

// OwnerLT applies the LT predicate on the "owner" field.
func OwnerLT(v string) predicate.Pulls {
	return predicate.Pulls(sql.FieldLT(FieldOwner, v))
}

// OwnerLTE applies the LTE predicate on the "owner" field.
func OwnerLTE(v string) predicate.Pulls {
	return predicate.Pulls(sql.FieldLTE(FieldOwner, v))
}

// OwnerContains applies the Contains predicate on the "owner" field.
func OwnerContains(v string) predicate.Pulls {
	return predicate.Pulls(sql.FieldContains(FieldOwner, v))
}

// OwnerHasPrefix applies the HasPrefix predicate on the "owner" field.
func OwnerHasPrefix(v string) predicate.Pulls {
	return predicate.Pulls(sql.FieldHasPrefix(FieldOwner, v))
}

// OwnerHasSuffix applies the HasSuffix predicate on the "owner" field.
func OwnerHasSuffix(v string) predicate.Pulls {
	return predicate.Pulls(sql.FieldHasSuffix(FieldOwner, v))
}

// OwnerEqualFold applies the EqualFold predicate on the "owner" field.
func OwnerEqualFold(v string) predicate.Pulls {
	return predicate.Pulls(sql.FieldEqualFold(FieldOwner, v))
}

// OwnerContainsFold applies the ContainsFold predicate on the "owner" field.
func OwnerContainsFold(v string) predicate.Pulls {
	return predicate.Pulls(sql.FieldContainsFold(FieldOwner, v))
}

// PrIDEQ applies the EQ predicate on the "prID" field.
func PrIDEQ(v int64) predicate.Pulls {
	return predicate.Pulls(sql.FieldEQ(FieldPrID, v))
}

// PrIDNEQ applies the NEQ predicate on the "prID" field.
func PrIDNEQ(v int64) predicate.Pulls {
	return predicate.Pulls(sql.FieldNEQ(FieldPrID, v))
}

// PrIDIn applies the In predicate on the "prID" field.
func PrIDIn(vs ...int64) predicate.Pulls {
	return predicate.Pulls(sql.FieldIn(FieldPrID, vs...))
}

// PrIDNotIn applies the NotIn predicate on the "prID" field.
func PrIDNotIn(vs ...int64) predicate.Pulls {
	return predicate.Pulls(sql.FieldNotIn(FieldPrID, vs...))
}

// PrIDGT applies the GT predicate on the "prID" field.
func PrIDGT(v int64) predicate.Pulls {
	return predicate.Pulls(sql.FieldGT(FieldPrID, v))
}

// PrIDGTE applies the GTE predicate on the "prID" field.
func PrIDGTE(v int64) predicate.Pulls {
	return predicate.Pulls(sql.FieldGTE(FieldPrID, v))
}

// PrIDLT applies the LT predicate on the "prID" field.
func PrIDLT(v int64) predicate.Pulls {
	return predicate.Pulls(sql.FieldLT(FieldPrID, v))
}

// PrIDLTE applies the LTE predicate on the "prID" field.
func PrIDLTE(v int64) predicate.Pulls {
	return predicate.Pulls(sql.FieldLTE(FieldPrID, v))
}

// RepoEQ applies the EQ predicate on the "repo" field.
func RepoEQ(v string) predicate.Pulls {
	return predicate.Pulls(sql.FieldEQ(FieldRepo, v))
}

// RepoNEQ applies the NEQ predicate on the "repo" field.
func RepoNEQ(v string) predicate.Pulls {
	return predicate.Pulls(sql.FieldNEQ(FieldRepo, v))
}

// RepoIn applies the In predicate on the "repo" field.
func RepoIn(vs ...string) predicate.Pulls {
	return predicate.Pulls(sql.FieldIn(FieldRepo, vs...))
}

// RepoNotIn applies the NotIn predicate on the "repo" field.
func RepoNotIn(vs ...string) predicate.Pulls {
	return predicate.Pulls(sql.FieldNotIn(FieldRepo, vs...))
}

// RepoGT applies the GT predicate on the "repo" field.
func RepoGT(v string) predicate.Pulls {
	return predicate.Pulls(sql.FieldGT(FieldRepo, v))
}

// RepoGTE applies the GTE predicate on the "repo" field.
func RepoGTE(v string) predicate.Pulls {
	return predicate.Pulls(sql.FieldGTE(FieldRepo, v))
}

// RepoLT applies the LT predicate on the "repo" field.
func RepoLT(v string) predicate.Pulls {
	return predicate.Pulls(sql.FieldLT(FieldRepo, v))
}

// RepoLTE applies the LTE predicate on the "repo" field.
func RepoLTE(v string) predicate.Pulls {
	return predicate.Pulls(sql.FieldLTE(FieldRepo, v))
}

// RepoContains applies the Contains predicate on the "repo" field.
func RepoContains(v string) predicate.Pulls {
	return predicate.Pulls(sql.FieldContains(FieldRepo, v))
}

// RepoHasPrefix applies the HasPrefix predicate on the "repo" field.
func RepoHasPrefix(v string) predicate.Pulls {
	return predicate.Pulls(sql.FieldHasPrefix(FieldRepo, v))
}

// RepoHasSuffix applies the HasSuffix predicate on the "repo" field.
func RepoHasSuffix(v string) predicate.Pulls {
	return predicate.Pulls(sql.FieldHasSuffix(FieldRepo, v))
}

// RepoEqualFold applies the EqualFold predicate on the "repo" field.
func RepoEqualFold(v string) predicate.Pulls {
	return predicate.Pulls(sql.FieldEqualFold(FieldRepo, v))
}

// RepoContainsFold applies the ContainsFold predicate on the "repo" field.
func RepoContainsFold(v string) predicate.Pulls {
	return predicate.Pulls(sql.FieldContainsFold(FieldRepo, v))
}

// RepoIDEQ applies the EQ predicate on the "repoID" field.
func RepoIDEQ(v int64) predicate.Pulls {
	return predicate.Pulls(sql.FieldEQ(FieldRepoID, v))
}

// RepoIDNEQ applies the NEQ predicate on the "repoID" field.
func RepoIDNEQ(v int64) predicate.Pulls {
	return predicate.Pulls(sql.FieldNEQ(FieldRepoID, v))
}

// RepoIDIn applies the In predicate on the "repoID" field.
func RepoIDIn(vs ...int64) predicate.Pulls {
	return predicate.Pulls(sql.FieldIn(FieldRepoID, vs...))
}

// RepoIDNotIn applies the NotIn predicate on the "repoID" field.
func RepoIDNotIn(vs ...int64) predicate.Pulls {
	return predicate.Pulls(sql.FieldNotIn(FieldRepoID, vs...))
}

// RepoIDGT applies the GT predicate on the "repoID" field.
func RepoIDGT(v int64) predicate.Pulls {
	return predicate.Pulls(sql.FieldGT(FieldRepoID, v))
}

// RepoIDGTE applies the GTE predicate on the "repoID" field.
func RepoIDGTE(v int64) predicate.Pulls {
	return predicate.Pulls(sql.FieldGTE(FieldRepoID, v))
}

// RepoIDLT applies the LT predicate on the "repoID" field.
func RepoIDLT(v int64) predicate.Pulls {
	return predicate.Pulls(sql.FieldLT(FieldRepoID, v))
}

// RepoIDLTE applies the LTE predicate on the "repoID" field.
func RepoIDLTE(v int64) predicate.Pulls {
	return predicate.Pulls(sql.FieldLTE(FieldRepoID, v))
}

// NumberEQ applies the EQ predicate on the "number" field.
func NumberEQ(v int) predicate.Pulls {
	return predicate.Pulls(sql.FieldEQ(FieldNumber, v))
}

// NumberNEQ applies the NEQ predicate on the "number" field.
func NumberNEQ(v int) predicate.Pulls {
	return predicate.Pulls(sql.FieldNEQ(FieldNumber, v))
}

// NumberIn applies the In predicate on the "number" field.
func NumberIn(vs ...int) predicate.Pulls {
	return predicate.Pulls(sql.FieldIn(FieldNumber, vs...))
}

// NumberNotIn applies the NotIn predicate on the "number" field.
func NumberNotIn(vs ...int) predicate.Pulls {
	return predicate.Pulls(sql.FieldNotIn(FieldNumber, vs...))
}

// NumberGT applies the GT predicate on the "number" field.
func NumberGT(v int) predicate.Pulls {
	return predicate.Pulls(sql.FieldGT(FieldNumber, v))
}

// NumberGTE applies the GTE predicate on the "number" field.
func NumberGTE(v int) predicate.Pulls {
	return predicate.Pulls(sql.FieldGTE(FieldNumber, v))
}

// NumberLT applies the LT predicate on the "number" field.
func NumberLT(v int) predicate.Pulls {
	return predicate.Pulls(sql.FieldLT(FieldNumber, v))
}

// NumberLTE applies the LTE predicate on the "number" field.
func NumberLTE(v int) predicate.Pulls {
	return predicate.Pulls(sql.FieldLTE(FieldNumber, v))
}

// CommentEQ applies the EQ predicate on the "comment" field.
func CommentEQ(v int64) predicate.Pulls {
	return predicate.Pulls(sql.FieldEQ(FieldComment, v))
}

// CommentNEQ applies the NEQ predicate on the "comment" field.
func CommentNEQ(v int64) predicate.Pulls {
	return predicate.Pulls(sql.FieldNEQ(FieldComment, v))
}

// CommentIn applies the In predicate on the "comment" field.
func CommentIn(vs ...int64) predicate.Pulls {
	return predicate.Pulls(sql.FieldIn(FieldComment, vs...))
}

// CommentNotIn applies the NotIn predicate on the "comment" field.
func CommentNotIn(vs ...int64) predicate.Pulls {
	return predicate.Pulls(sql.FieldNotIn(FieldComment, vs...))
}

// CommentGT applies the GT predicate on the "comment" field.
func CommentGT(v int64) predicate.Pulls {
	return predicate.Pulls(sql.FieldGT(FieldComment, v))
}

// CommentGTE applies the GTE predicate on the "comment" field.
func CommentGTE(v int64) predicate.Pulls {
	return predicate.Pulls(sql.FieldGTE(FieldComment, v))
}

// CommentLT applies the LT predicate on the "comment" field.
func CommentLT(v int64) predicate.Pulls {
	return predicate.Pulls(sql.FieldLT(FieldComment, v))
}

// CommentLTE applies the LTE predicate on the "comment" field.
func CommentLTE(v int64) predicate.Pulls {
	return predicate.Pulls(sql.FieldLTE(FieldComment, v))
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.Pulls {
	return predicate.Pulls(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.Pulls {
	return predicate.Pulls(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.Pulls {
	return predicate.Pulls(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Pulls {
	return predicate.Pulls(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.Pulls {
	return predicate.Pulls(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.Pulls {
	return predicate.Pulls(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.Pulls {
	return predicate.Pulls(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.Pulls {
	return predicate.Pulls(sql.FieldLTE(FieldCreatedAt, v))
}

// MergedAtEQ applies the EQ predicate on the "mergedAt" field.
func MergedAtEQ(v time.Time) predicate.Pulls {
	return predicate.Pulls(sql.FieldEQ(FieldMergedAt, v))
}

// MergedAtNEQ applies the NEQ predicate on the "mergedAt" field.
func MergedAtNEQ(v time.Time) predicate.Pulls {
	return predicate.Pulls(sql.FieldNEQ(FieldMergedAt, v))
}

// MergedAtIn applies the In predicate on the "mergedAt" field.
func MergedAtIn(vs ...time.Time) predicate.Pulls {
	return predicate.Pulls(sql.FieldIn(FieldMergedAt, vs...))
}

// MergedAtNotIn applies the NotIn predicate on the "mergedAt" field.
func MergedAtNotIn(vs ...time.Time) predicate.Pulls {
	return predicate.Pulls(sql.FieldNotIn(FieldMergedAt, vs...))
}

// MergedAtGT applies the GT predicate on the "mergedAt" field.
func MergedAtGT(v time.Time) predicate.Pulls {
	return predicate.Pulls(sql.FieldGT(FieldMergedAt, v))
}

// MergedAtGTE applies the GTE predicate on the "mergedAt" field.
func MergedAtGTE(v time.Time) predicate.Pulls {
	return predicate.Pulls(sql.FieldGTE(FieldMergedAt, v))
}

// MergedAtLT applies the LT predicate on the "mergedAt" field.
func MergedAtLT(v time.Time) predicate.Pulls {
	return predicate.Pulls(sql.FieldLT(FieldMergedAt, v))
}

// MergedAtLTE applies the LTE predicate on the "mergedAt" field.
func MergedAtLTE(v time.Time) predicate.Pulls {
	return predicate.Pulls(sql.FieldLTE(FieldMergedAt, v))
}

// MergedAtIsNil applies the IsNil predicate on the "mergedAt" field.
func MergedAtIsNil() predicate.Pulls {
	return predicate.Pulls(sql.FieldIsNull(FieldMergedAt))
}

// MergedAtNotNil applies the NotNil predicate on the "mergedAt" field.
func MergedAtNotNil() predicate.Pulls {
	return predicate.Pulls(sql.FieldNotNull(FieldMergedAt))
}

// CheckRunIDEQ applies the EQ predicate on the "checkRunID" field.
func CheckRunIDEQ(v int64) predicate.Pulls {
	return predicate.Pulls(sql.FieldEQ(FieldCheckRunID, v))
}

// CheckRunIDNEQ applies the NEQ predicate on the "checkRunID" field.
func CheckRunIDNEQ(v int64) predicate.Pulls {
	return predicate.Pulls(sql.FieldNEQ(FieldCheckRunID, v))
}

// CheckRunIDIn applies the In predicate on the "checkRunID" field.
func CheckRunIDIn(vs ...int64) predicate.Pulls {
	return predicate.Pulls(sql.FieldIn(FieldCheckRunID, vs...))
}

// CheckRunIDNotIn applies the NotIn predicate on the "checkRunID" field.
func CheckRunIDNotIn(vs ...int64) predicate.Pulls {
	return predicate.Pulls(sql.FieldNotIn(FieldCheckRunID, vs...))
}

// CheckRunIDGT applies the GT predicate on the "checkRunID" field.
func CheckRunIDGT(v int64) predicate.Pulls {
	return predicate.Pulls(sql.FieldGT(FieldCheckRunID, v))
}

// CheckRunIDGTE applies the GTE predicate on the "checkRunID" field.
func CheckRunIDGTE(v int64) predicate.Pulls {
	return predicate.Pulls(sql.FieldGTE(FieldCheckRunID, v))
}

// CheckRunIDLT applies the LT predicate on the "checkRunID" field.
func CheckRunIDLT(v int64) predicate.Pulls {
	return predicate.Pulls(sql.FieldLT(FieldCheckRunID, v))
}

// CheckRunIDLTE applies the LTE predicate on the "checkRunID" field.
func CheckRunIDLTE(v int64) predicate.Pulls {
	return predicate.Pulls(sql.FieldLTE(FieldCheckRunID, v))
}

// CheckRunResultEQ applies the EQ predicate on the "checkRunResult" field.
func CheckRunResultEQ(v string) predicate.Pulls {
	return predicate.Pulls(sql.FieldEQ(FieldCheckRunResult, v))
}

// CheckRunResultNEQ applies the NEQ predicate on the "checkRunResult" field.
func CheckRunResultNEQ(v string) predicate.Pulls {
	return predicate.Pulls(sql.FieldNEQ(FieldCheckRunResult, v))
}

// CheckRunResultIn applies the In predicate on the "checkRunResult" field.
func CheckRunResultIn(vs ...string) predicate.Pulls {
	return predicate.Pulls(sql.FieldIn(FieldCheckRunResult, vs...))
}

// CheckRunResultNotIn applies the NotIn predicate on the "checkRunResult" field.
func CheckRunResultNotIn(vs ...string) predicate.Pulls {
	return predicate.Pulls(sql.FieldNotIn(FieldCheckRunResult, vs...))
}

// CheckRunResultGT applies the GT predicate on the "checkRunResult" field.
func CheckRunResultGT(v string) predicate.Pulls {
	return predicate.Pulls(sql.FieldGT(FieldCheckRunResult, v))
}

// CheckRunResultGTE applies the GTE predicate on the "checkRunResult" field.
func CheckRunResultGTE(v string) predicate.Pulls {
	return predicate.Pulls(sql.FieldGTE(FieldCheckRunResult, v))
}

// CheckRunResultLT applies the LT predicate on the "checkRunResult" field.
func CheckRunResultLT(v string) predicate.Pulls {
	return predicate.Pulls(sql.FieldLT(FieldCheckRunResult, v))
}

// CheckRunResultLTE applies the LTE predicate on the "checkRunResult" field.
func CheckRunResultLTE(v string) predicate.Pulls {
	return predicate.Pulls(sql.FieldLTE(FieldCheckRunResult, v))
}

// CheckRunResultContains applies the Contains predicate on the "checkRunResult" field.
func CheckRunResultContains(v string) predicate.Pulls {
	return predicate.Pulls(sql.FieldContains(FieldCheckRunResult, v))
}

// CheckRunResultHasPrefix applies the HasPrefix predicate on the "checkRunResult" field.
func CheckRunResultHasPrefix(v string) predicate.Pulls {
	return predicate.Pulls(sql.FieldHasPrefix(FieldCheckRunResult, v))
}

// CheckRunResultHasSuffix applies the HasSuffix predicate on the "checkRunResult" field.
func CheckRunResultHasSuffix(v string) predicate.Pulls {
	return predicate.Pulls(sql.FieldHasSuffix(FieldCheckRunResult, v))
}

// CheckRunResultEqualFold applies the EqualFold predicate on the "checkRunResult" field.
func CheckRunResultEqualFold(v string) predicate.Pulls {
	return predicate.Pulls(sql.FieldEqualFold(FieldCheckRunResult, v))
}

// CheckRunResultContainsFold applies the ContainsFold predicate on the "checkRunResult" field.
func CheckRunResultContainsFold(v string) predicate.Pulls {
	return predicate.Pulls(sql.FieldContainsFold(FieldCheckRunResult, v))
}

// HeadShaEQ applies the EQ predicate on the "headSha" field.
func HeadShaEQ(v string) predicate.Pulls {
	return predicate.Pulls(sql.FieldEQ(FieldHeadSha, v))
}

// HeadShaNEQ applies the NEQ predicate on the "headSha" field.
func HeadShaNEQ(v string) predicate.Pulls {
	return predicate.Pulls(sql.FieldNEQ(FieldHeadSha, v))
}

// HeadShaIn applies the In predicate on the "headSha" field.
func HeadShaIn(vs ...string) predicate.Pulls {
	return predicate.Pulls(sql.FieldIn(FieldHeadSha, vs...))
}

// HeadShaNotIn applies the NotIn predicate on the "headSha" field.
func HeadShaNotIn(vs ...string) predicate.Pulls {
	return predicate.Pulls(sql.FieldNotIn(FieldHeadSha, vs...))
}

// HeadShaGT applies the GT predicate on the "headSha" field.
func HeadShaGT(v string) predicate.Pulls {
	return predicate.Pulls(sql.FieldGT(FieldHeadSha, v))
}

// HeadShaGTE applies the GTE predicate on the "headSha" field.
func HeadShaGTE(v string) predicate.Pulls {
	return predicate.Pulls(sql.FieldGTE(FieldHeadSha, v))
}

// HeadShaLT applies the LT predicate on the "headSha" field.
func HeadShaLT(v string) predicate.Pulls {
	return predicate.Pulls(sql.FieldLT(FieldHeadSha, v))
}

// HeadShaLTE applies the LTE predicate on the "headSha" field.
func HeadShaLTE(v string) predicate.Pulls {
	return predicate.Pulls(sql.FieldLTE(FieldHeadSha, v))
}

// HeadShaContains applies the Contains predicate on the "headSha" field.
func HeadShaContains(v string) predicate.Pulls {
	return predicate.Pulls(sql.FieldContains(FieldHeadSha, v))
}

// HeadShaHasPrefix applies the HasPrefix predicate on the "headSha" field.
func HeadShaHasPrefix(v string) predicate.Pulls {
	return predicate.Pulls(sql.FieldHasPrefix(FieldHeadSha, v))
}

// HeadShaHasSuffix applies the HasSuffix predicate on the "headSha" field.
func HeadShaHasSuffix(v string) predicate.Pulls {
	return predicate.Pulls(sql.FieldHasSuffix(FieldHeadSha, v))
}

// HeadShaEqualFold applies the EqualFold predicate on the "headSha" field.
func HeadShaEqualFold(v string) predicate.Pulls {
	return predicate.Pulls(sql.FieldEqualFold(FieldHeadSha, v))
}

// HeadShaContainsFold applies the ContainsFold predicate on the "headSha" field.
func HeadShaContainsFold(v string) predicate.Pulls {
	return predicate.Pulls(sql.FieldContainsFold(FieldHeadSha, v))
}

// HasCreator applies the HasEdge predicate on the "Creator" edge.
func HasCreator() predicate.Pulls {
	return predicate.Pulls(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CreatorTable, CreatorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreatorWith applies the HasEdge predicate on the "Creator" edge with a given conditions (other predicates).
func HasCreatorWith(preds ...predicate.User) predicate.Pulls {
	return predicate.Pulls(func(s *sql.Selector) {
		step := newCreatorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Pulls) predicate.Pulls {
	return predicate.Pulls(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Pulls) predicate.Pulls {
	return predicate.Pulls(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Pulls) predicate.Pulls {
	return predicate.Pulls(func(s *sql.Selector) {
		p(s.Not())
	})
}
